<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Khalil Chettaoui</title>
    <link>/posts/</link>
    <description>Recent content in Posts on Khalil Chettaoui</description>
    <generator>Hugo -- gohugo.io</generator>
      <language>en</language>
      <copyright>© Khalil Chettaoui</copyright>
      <lastBuildDate>Sat, 29 Jul 2023 10:02:28 +0100</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cpu Scheduling</title>
      <link>/posts/cpu-scheduling/</link>
      <pubDate>Sat, 29 Jul 2023 13:37:13 +0100</pubDate>

      <guid>/posts/cpu-scheduling/</guid>
      <description>multiprogramming is giving cpu to to processes when the current process needs to wait for I/O operation when one process has to wait the os takes the cpu from that process and giving it to another process CPU scheduling alogrithms CPU and I/O Burst Cycles process execution consists of a cycle of ==cpu execution== and ==I/O wait==. process alternates between these 2 states process execution begins with : CPU burst I/O burst CPU burst I/O burst &amp;hellip; CPU burst is when the process is being executed in the CPU I/O burst is when the cpu is waiting for I/O for further execution preemptive scheduling : a high priority process can be given the CPU when a process switches from running state to ready state (interruption) when a process switches from waiting state to ready state (completion of I/O) non preemptive scheduling : a process will not be distrubed until it is complete when a process switches from running to waiting state (waiting for I/O) when a process terminates Scheduling criteria 📋 CPU utilization : we want to keep the cpu as busy as possible.</description>
      <content>&lt;ul&gt;
&lt;li&gt;multiprogramming is giving cpu to to processes when the current process needs to wait for I/O operation&lt;/li&gt;
&lt;li&gt;when one process has to wait the os takes the cpu from that process and giving it to another process&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;cpu-scheduling-alogrithms&#34;&gt;
  CPU scheduling alogrithms
  &lt;a href=&#34;#cpu-scheduling-alogrithms&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;h2 id=&#34;cpu-and-io-burst-cycles&#34;&gt;
  CPU and I/O Burst Cycles
  &lt;a href=&#34;#cpu-and-io-burst-cycles&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;process execution consists of a cycle of ==cpu execution== and ==I/O wait==.&lt;/li&gt;
&lt;li&gt;process alternates between these 2 states&lt;/li&gt;
&lt;li&gt;process execution begins with :
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;CPU burst&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;I/O burst&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;CPU burst&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;I/O burst&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&amp;hellip;
&lt;em&gt;CPU burst is when the process is being executed in the CPU&lt;/em&gt;
&lt;em&gt;I/O burst is when the cpu is waiting for I/O for further execution&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;preemptive scheduling : a high priority process can be given the CPU
&lt;ul&gt;
&lt;li&gt;when a process switches from &lt;em&gt;running state&lt;/em&gt; to &lt;em&gt;ready state&lt;/em&gt; (interruption)&lt;/li&gt;
&lt;li&gt;when a process switches from &lt;em&gt;waiting state&lt;/em&gt; to &lt;em&gt;ready state&lt;/em&gt; (completion of I/O)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;non preemptive scheduling :  a process will not be distrubed until it is complete
&lt;ul&gt;
&lt;li&gt;when a process switches from &lt;em&gt;running&lt;/em&gt; to &lt;em&gt;waiting state&lt;/em&gt; (waiting for I/O)&lt;/li&gt;
&lt;li&gt;when a process &lt;em&gt;terminates&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;scheduling-criteria-&#34;&gt;
  Scheduling criteria 📋
  &lt;a href=&#34;#scheduling-criteria-&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;CPU utilization :
&lt;ul&gt;
&lt;li&gt;we want to keep the cpu as busy as possible. cpu utlization conceptually ranges from 0 to 100%&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Throughput :
&lt;ul&gt;
&lt;li&gt;measures the number of processes that are being completed by time unit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Turnaround time :
&lt;ul&gt;
&lt;li&gt;the interval from the time of submission of a process to the time of completion/&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;turnaround time is the sum of the periods spent waiting to get into memory, waiting in the ready queue, executing on the cpu and doing I/O&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Waiting time :
&lt;ul&gt;
&lt;li&gt;waiting time is the sum of the periods spent waiting in the ready queue.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Response time :
&lt;ul&gt;
&lt;li&gt;time from the submission of a request until the first response is produced.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;fcfs-first-come-first-served-&#34;&gt;
  FCFS (First Come First Served) 🚦
  &lt;a href=&#34;#fcfs-first-come-first-served-&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Simplest CPU-scheduling algorithm&lt;/li&gt;
&lt;li&gt;the process that requests the cpu first is allocated the cpu first&lt;/li&gt;
&lt;li&gt;implmentation of fcfs policy is easily managed with a &lt;strong&gt;FIFO queue&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;the average waiting time under the FCFS policy is quite long&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Process&lt;/th&gt;
&lt;th&gt;Burst Time (ms)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;P1&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&#34;highlight-wrapper&#34;&gt;
  &lt;div class=&#34;highlight-toolbar&#34;&gt;
    &lt;span class=&#34;item&#34;&gt;
      &lt;span class=&#34;label&#34;&gt;Lang:&lt;/span&gt;
      &lt;span class=&#34;name&#34;&gt;&lt;/span&gt;
    &lt;/span&gt;


    &lt;button class=&#34;item right outline brighter hide js-btn-copy-code&#34;&gt;Copy&lt;/button&gt;
  &lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;P1----------------------P2-P3
|------------------------|---|---|
0-----------------------24-27-30&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;waiting time for P1=0&lt;/li&gt;
&lt;li&gt;waiting time for P2=24   |&amp;mdash;&amp;gt; &lt;strong&gt;Avg waiting time&lt;/strong&gt; = (0+24+27)/3 = &lt;strong&gt;17 ms&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;waiting time for P3=27
&lt;strong&gt;another case&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight-wrapper&#34;&gt;
  &lt;div class=&#34;highlight-toolbar&#34;&gt;
    &lt;span class=&#34;item&#34;&gt;
      &lt;span class=&#34;label&#34;&gt;Lang:&lt;/span&gt;
      &lt;span class=&#34;name&#34;&gt;&lt;/span&gt;
    &lt;/span&gt;


    &lt;button class=&#34;item right outline brighter hide js-btn-copy-code&#34;&gt;Copy&lt;/button&gt;
  &lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;P2-P3-P1
|---|---|------------------------|
0--3--6-----------------------30&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;waiting time for P1= 6&lt;/li&gt;
&lt;li&gt;waiting time for P2= 0   |&amp;mdash;&amp;gt; &lt;strong&gt;Avg waiting time&lt;/strong&gt; = (0+3+6)/3 = &lt;strong&gt;3 ms&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;waiting time for P3= 3
&lt;strong&gt;! depends on the cpu burst time&lt;/strong&gt;
&lt;strong&gt;! FCFS is non preemptive&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Process keeps the cpu until termination or requesting I/O&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;sjfs-shortest-job-first-scheduling-&#34;&gt;
  SJFS (Shortest Job First Scheduling) 🚀
  &lt;a href=&#34;#sjfs-shortest-job-first-scheduling-&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This alogrithm associates with each process the length of &lt;strong&gt;the process&amp;rsquo;s next cpu burst&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;when the cpu is available, it is assigned to the process &lt;strong&gt;that has the smallest next CPU burst&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;if the burst is the same, FCFS scheduling is used to break the tie&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SJFS algorithm can be preemptive or non preemptive&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;example-of-non-preemptive-sjfs&#34;&gt;
  Example of non preemptive SJFS
  &lt;a href=&#34;#example-of-non-preemptive-sjfs&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Process&lt;/th&gt;
&lt;th&gt;Burst Time (ms)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;P1&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P3&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P4&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Gant chart&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&#34;highlight-wrapper&#34;&gt;
  &lt;div class=&#34;highlight-toolbar&#34;&gt;
    &lt;span class=&#34;item&#34;&gt;
      &lt;span class=&#34;label&#34;&gt;Lang:&lt;/span&gt;
      &lt;span class=&#34;name&#34;&gt;&lt;/span&gt;
    &lt;/span&gt;


    &lt;button class=&#34;item right outline brighter hide js-btn-copy-code&#34;&gt;Copy&lt;/button&gt;
  &lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;P4-P1----P3-----P2
|---|------|-------|--------|
0--3-----9------16------24&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;waiting time for P1 = 3ms&lt;/strong&gt;}
&lt;strong&gt;waiting time for P2 = 16ms&lt;/strong&gt; }==&amp;gt; average waiting time = (3+16+9)/4= &lt;em&gt;7 ms&lt;/em&gt;
&lt;strong&gt;waiting time for P3 = 9ms&lt;/strong&gt;}=&amp;gt; with fcfs the avg wait would be &lt;em&gt;10.25 ms&lt;/em&gt;
&lt;strong&gt;waiting time for P4= 0ms&lt;/strong&gt;}&lt;/p&gt;

&lt;h4 id=&#34;example-of-preemptive-sjfs&#34;&gt;
  Example of preemptive SJFS
  &lt;a href=&#34;#example-of-preemptive-sjfs&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Process&lt;/th&gt;
&lt;th&gt;Arrival Time&lt;/th&gt;
&lt;th&gt;Burst Time (ms)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;P1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P4&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&#34;highlight-wrapper&#34;&gt;
  &lt;div class=&#34;highlight-toolbar&#34;&gt;
    &lt;span class=&#34;item&#34;&gt;
      &lt;span class=&#34;label&#34;&gt;Lang:&lt;/span&gt;
      &lt;span class=&#34;name&#34;&gt;&lt;/span&gt;
    &lt;/span&gt;


    &lt;button class=&#34;item right outline brighter hide js-btn-copy-code&#34;&gt;Copy&lt;/button&gt;
  &lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;P1-P2----P4------**P1**----------P3
| - | - - - - | - - - - - | **- - - - - - -** | - - - - - - - - - |
0-1-------5-------10----------17-------------26&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;waiting time for P1 = (0+10) - 1 - 0 = 9ms&lt;/strong&gt;}
&lt;strong&gt;waiting time for P2 = 1- 0 -1 = 0 ms&lt;/strong&gt; }==&amp;gt; average waiting time = (26)/4= &lt;em&gt;6.5 ms&lt;/em&gt;
&lt;strong&gt;waiting time for P3 = 17 - 0 - 2 = 15 ms&lt;/strong&gt;}=&amp;gt;
&lt;strong&gt;waiting time for P4= 5 - 0 - 3 = 2 ms&lt;/strong&gt;}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;waiting time = total waiting time - nb of ms process executed - arrival time&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Although the SJF algorithm is optimal, it cannot be implemented at the level of short-term CPU scheduling.&lt;/li&gt;
&lt;li&gt;The real difficulty with the SJF algorithm is knowing the length of the next CPU request.&lt;/li&gt;
&lt;li&gt;There is no way to know the length of the next CPU burst.
One approach is:&lt;/li&gt;
&lt;li&gt;To try to approximate SJF scheduling.&lt;/li&gt;
&lt;li&gt;We may not know the length of the next CPU burst, but we may be able to predict its value.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ps-priority-scheduling-&#34;&gt;
  PS (Priority Scheduling) 📋
  &lt;a href=&#34;#ps-priority-scheduling-&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A priority is associated with each process, and the CPU is allocated to the process with the highest priority.&lt;/li&gt;
&lt;li&gt;Equal-priority processes are scheduled in FCFS order.&lt;/li&gt;
&lt;li&gt;An SJF algorithm is simply a priority algorithm where the priority is the inverse of the (predicted) next CPU burst.&lt;/li&gt;
&lt;li&gt;The larger the CPU burst, the lower the priority, and vice versa.&lt;/li&gt;
&lt;li&gt;Priority scheduling can be either &lt;strong&gt;preemptive&lt;/strong&gt; or &lt;strong&gt;nonpreemptive&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;A preemptive priority scheduling algorithm will preempt the CPU if the priority of the newly arrived process is higher than the priority of the currently running process.&lt;/li&gt;
&lt;li&gt;A nonpreemptive priority scheduling algorithm will simply put the new process at the head of the ready queue.&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;PID&lt;/th&gt;
&lt;th&gt;Burst Time (ms)&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Priority&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;P1&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&#34;highlight-wrapper&#34;&gt;
  &lt;div class=&#34;highlight-toolbar&#34;&gt;
    &lt;span class=&#34;item&#34;&gt;
      &lt;span class=&#34;label&#34;&gt;Lang:&lt;/span&gt;
      &lt;span class=&#34;name&#34;&gt;&lt;/span&gt;
    &lt;/span&gt;


    &lt;button class=&#34;item right outline brighter hide js-btn-copy-code&#34;&gt;Copy&lt;/button&gt;
  &lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;P2-P5-----P1--------------P3--P4
| - | - - - - - | - - - - - - - - - - | - - | - |
0-1--------6----------------16-18-19&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;waiting time for P1 = 6 ms&lt;/strong&gt;}
&lt;strong&gt;waiting time for P2 = 0 ms&lt;/strong&gt; }==&amp;gt; average waiting time = 41/5= &lt;em&gt;8.2 ms&lt;/em&gt;
&lt;strong&gt;waiting time for P3 = 16 ms&lt;/strong&gt;}=&amp;gt;
&lt;strong&gt;waiting time for P4=  18 ms&lt;/strong&gt;}
&lt;strong&gt;waiting time for P5= 1 ms&lt;/strong&gt;}&lt;/p&gt;

&lt;h4 id=&#34;problem-with-priority-scheduling-algorithm-&#34;&gt;
  Problem with Priority Scheduling algorithm ⚠️
  &lt;a href=&#34;#problem-with-priority-scheduling-algorithm-&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;in heavily loaded computer system with a stady steam of high priority processes can prevent a low priority process of ever getting to use the cpu&lt;/li&gt;
&lt;li&gt;can leave some low priority processes waiting indefinetely&lt;/li&gt;
&lt;li&gt;a major problem of priority scheduling algorithm is &lt;strong&gt;indefinite blocking&lt;/strong&gt; or &lt;strong&gt;starvation&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;solution-to-the-problem-&#34;&gt;
  Solution to the problem ✅
  &lt;a href=&#34;#solution-to-the-problem-&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;a solution of indifinite bloquage of low priority processes is &lt;strong&gt;aging&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;gradually increasing the priority of processes that wait in the system for a long time&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;rr-round-robin-scheduling-&#34;&gt;
  RR (Round Robin Scheduling) ⏲️
  &lt;a href=&#34;#rr-round-robin-scheduling-&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Round Robin algorithm is specifically designed for time sharing systems&lt;/li&gt;
&lt;li&gt;It is similar to FCFS scheduling but premption is added to switch between processes&lt;/li&gt;
&lt;li&gt;A small unit of time called time quantum or time slice is defined (&lt;em&gt;generally from 10 to 100 ms&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;we keep the ready queue as FIFO queue&lt;/li&gt;
&lt;li&gt;different scenarios
&lt;ul&gt;
&lt;li&gt;CPU burst &amp;lt; 1 time quantum :
&lt;ul&gt;
&lt;li&gt;the process will release the cpu voluntarily&lt;/li&gt;
&lt;li&gt;the cpu scheduler will go to the next ready process in the ready queue&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPU burst &amp;gt; 1 time quantum :
&lt;ul&gt;
&lt;li&gt;interruption of the os&lt;/li&gt;
&lt;li&gt;a context switch will be executed and the process will be put at the end of the tail&lt;/li&gt;
&lt;li&gt;cpu scheduler will select the next process in the ready queue&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;time quantum is at 4ms&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Process&lt;/th&gt;
&lt;th&gt;Burst Time (ms)&lt;/th&gt;
&lt;th&gt;TAT&lt;/th&gt;
&lt;th&gt;AWT&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;P1&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;30 - 0 = 30&lt;/td&gt;
&lt;td&gt;30 - 24 = 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;7 - 0 = 7&lt;/td&gt;
&lt;td&gt;7 - 3 = 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;10 - 0 = 10&lt;/td&gt;
&lt;td&gt;10 - 3 = 7&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;P1&lt;/strong&gt;&amp;ndash;P2-P3-&lt;strong&gt;P1&amp;ndash;P1&amp;ndash;P1&amp;ndash;P1&amp;ndash;P1&lt;/strong&gt;
|&lt;strong&gt;&amp;mdash;-&lt;/strong&gt;|&amp;mdash;|&amp;mdash;|&lt;strong&gt;&amp;mdash;-|&amp;mdash;-|&amp;mdash;-|&amp;mdash;-|&amp;mdash;-&lt;/strong&gt;|
0     4     7    &lt;strong&gt;10    14   18    22   26   30&lt;/strong&gt;
&lt;strong&gt;Turn around time = completion time - arrival time&lt;/strong&gt;
**Wait time = tat - burst time **&lt;/p&gt;
</content>
    </item>
    <item>
      <title>Docker</title>
      <link>/posts/docker/</link>
      <pubDate>Sat, 29 Jul 2023 13:36:19 +0100</pubDate>

      <guid>/posts/docker/</guid>
      <description>Docker 🐳 Why docker and why now?
Isolation: containers give us similar isolation to vms, containers have their own ip address, filesystem, process space, without the need of full operating system. Environment: containers remove the need to worry about required dependencies and environment required to run the app as it offers a standardized way to run an application no matter the plateform Speed: moving from host to container we can isolate the workloads inside them and safely run the together on the same kernel.</description>
      <content>
&lt;h1 id=&#34;docker-&#34;&gt;
  Docker 🐳
  &lt;a href=&#34;#docker-&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Why docker and why now?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Isolation: containers give us similar isolation to vms, containers have their own ip address, filesystem, process space, without the need of full operating system.&lt;/li&gt;
&lt;li&gt;Environment: containers remove the need to worry about required dependencies and environment required to run the app as it offers a standardized way to run an application no matter the plateform&lt;/li&gt;
&lt;li&gt;Speed: moving from host to container we can isolate the workloads inside them and safely run the together on the same kernel.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;image-vs-container&#34;&gt;
  Image vs. Container
  &lt;a href=&#34;#image-vs-container&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;An image is the application we want to run&lt;/li&gt;
&lt;li&gt;A container is an instance of that image running as a process&lt;/li&gt;
&lt;li&gt;You can have many containers running off the same image&lt;/li&gt;
&lt;li&gt;Docker default image registry is called &amp;ldquo;Docker Hub&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;docker-basics&#34;&gt;
  Docker basics
  &lt;a href=&#34;#docker-basics&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;docker looks for an image locally in cache, doesnt find anything&lt;/li&gt;
&lt;li&gt;then looks in remote repositoriy (default to docker hub)&lt;/li&gt;
&lt;li&gt;downloads the latest version&lt;/li&gt;
&lt;li&gt;creates a new container 🏺 based on that image&lt;/li&gt;
&lt;li&gt;gives it virtual ip on a private network inside docker engine&lt;/li&gt;
&lt;li&gt;opens up port 80 on host and forwards to port 80 in container&lt;/li&gt;
&lt;li&gt;starts container by using CMD in the image DockerFile
&lt;strong&gt;Running a container&lt;/strong&gt;
&lt;code&gt;docker container run --publish 80:80 nginx&lt;/code&gt;
this command fetches an nginx image from the registry and keeps it running on the background.
to fix the problem we add the &lt;code&gt;--detach&lt;/code&gt; flag before nginx to keep the container running in the background as a process.
&lt;code&gt;docker container run --publish 80:80 --detach nginx&lt;/code&gt;
&lt;em&gt;output&lt;/em&gt;:
&lt;code&gt;3ed66a4947739...&lt;/code&gt;
&lt;strong&gt;Listing container&lt;/strong&gt;
&lt;code&gt;docker container ls&lt;/code&gt;
this command only shows by default running containers
to list all container use :
&lt;code&gt;docker container ls -a&lt;/code&gt;
&lt;strong&gt;Stopping container&lt;/strong&gt;:
&lt;code&gt;docker container stop &amp;lt;container-uid/name&amp;gt;&lt;/code&gt;
&lt;strong&gt;Naming a container&lt;/strong&gt;:
&lt;code&gt;docker container run --publish 80:80 --detach --name webhost nginx&lt;/code&gt;
&lt;strong&gt;Removing a container&lt;/strong&gt;:
&lt;code&gt;docker container rm &amp;lt;container-name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;containers-vs-vms&#34;&gt;
  Containers vs. VMs
  &lt;a href=&#34;#containers-vs-vms&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Containers arent Mini-VM&amp;rsquo;s&lt;/strong&gt; even though they are often compared together.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Containers are just processes&lt;/li&gt;
&lt;li&gt;Limited to what ressource they can access&lt;/li&gt;
&lt;li&gt;Exit when process stops&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    <item>
      <title>Cloud Computing Pillars</title>
      <link>/posts/cloud-computing-pillars/</link>
      <pubDate>Sat, 29 Jul 2023 13:34:51 +0100</pubDate>

      <guid>/posts/cloud-computing-pillars/</guid>
      <description>The Pillars of Cloud There are at least as many different opinions of what ‘cloud’ means as there are software developers. However, we can all agree that cloud does mean something. Cloud computing promotes more efficient utilization of resources by reducing the transaction costs involved in provisioning and deprovisioning infrastructure to near zero, and it is able to do so because it differs in qualitative ways from previous models of computing (including virtualization).</description>
      <content>
&lt;h1 id=&#34;the-pillars-of-cloud&#34;&gt;
  The Pillars of Cloud
  &lt;a href=&#34;#the-pillars-of-cloud&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;There are at least as many different opinions of what ‘cloud’ means as there are software developers. However, we can all agree that cloud does mean something. Cloud computing promotes more efficient utilization of resources by reducing the &lt;a href=&#34;https://en.wikipedia.org/wiki/Transaction_cost&#34;&gt;transaction costs&lt;/a&gt; involved in provisioning and deprovisioning infrastructure to near zero, and it is able to do so because it differs in qualitative ways from previous models of computing (including virtualization). We identify two in particular.&lt;/p&gt;
&lt;p&gt;These concepts are not always applicable to all aspects of the system, but we expect all services in OpenStack to conform to them wherever they are applicable, either directly or by working in conjunction with other services.
&lt;strong&gt;Elasticity&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;L&amp;rsquo;élasticité dans le cloud computing est la capacité de ce cloud à s&amp;rsquo;adapter aux besoins
applicatifs le plus rapidement possible.
&lt;strong&gt;Grid Computing&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;It provides a platform in which computing resources are organized into one or more logical pools to reach a common goal to solve a single task.&lt;/li&gt;
&lt;li&gt;Grid computing systems can involve computing resources that are heterogeneous and geographically dispersed.&lt;/li&gt;
&lt;li&gt;Grid computing is a form of distributed computing that involves coordinating and sharing computing, application, data and storage or network resources across dynamic and geographically dispersed organization&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;cloud-computing&#34;&gt;
  Cloud Computing
  &lt;a href=&#34;#cloud-computing&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Cloud computing is a model for enabling convenient, on-demand network access to a shared pool of configurable computing resources (e.g., networks, servers, storage, applications, and services) that can be rapidly provisioned and released with minimal management effort or service provider interaction.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;key-technologies&#34;&gt;
  Key technologies
  &lt;a href=&#34;#key-technologies&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Virtualization : an environment able to render all the services, being supported by a hardware&lt;/li&gt;
&lt;li&gt;Outsourcing : farming out of services to a third party&lt;/li&gt;
&lt;li&gt;Ressource sharing : device or piece of information on a computer that can be remotely accessed from another computer, transparently as if it were a resource in the local machine.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;cloud-characteristics&#34;&gt;
  Cloud Characteristics
  &lt;a href=&#34;#cloud-characteristics&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Elasticity: Capacities can be elastically provisoned and released in some cases automatically and rapidly using the concept of scaling (horizental and vertical)&lt;/li&gt;
&lt;li&gt;On demand self service: A consumer can unilaterally provision computing capabilities, such as server time and network storage, as needed automatically without requiring human interaction&lt;/li&gt;
&lt;li&gt;Ressource pooling: The provider’s computing resources are pooled to serve multiple consumers using a ==multi-tenant model==, with different physical and virtual resources dynamically assigned and reassigned according to consumer demand.&lt;/li&gt;
&lt;li&gt;Measured service: Cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service&lt;/li&gt;
&lt;li&gt;Broad network access: Capabilities are available over the network and accessed through standard mechanisms that promote use by heterogeneous thin or thick client platforms&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;cloud-deployments&#34;&gt;
  Cloud deployments
  &lt;a href=&#34;#cloud-deployments&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;A cloud deployment model specifies how a cloud infrastructure is built, managed, and accessed.
NIST specifies four primary cloud deployment models:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Public&lt;/li&gt;
&lt;li&gt;Private (On-premise, Off-premise)&lt;/li&gt;
&lt;li&gt;Community (On-premise, Off-premise)&lt;/li&gt;
&lt;li&gt;Hybrid&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;public-cloud&#34;&gt;
  Public Cloud
  &lt;a href=&#34;#public-cloud&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Available to the general public&lt;/li&gt;
&lt;li&gt;Available with little restriction&lt;/li&gt;
&lt;li&gt;Access through internet&lt;/li&gt;
&lt;li&gt;Owned by an organization (amazon, microsoft)&lt;/li&gt;
&lt;li&gt;Data might be comingled on common storage devices&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;private-cloud&#34;&gt;
  Private Cloud
  &lt;a href=&#34;#private-cloud&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Exist on-premises or off-premises&lt;/li&gt;
&lt;li&gt;Operated solely by an organization for the organization&lt;/li&gt;
&lt;li&gt;Data is not comingled&lt;/li&gt;
&lt;li&gt;Uses organizations data center and IT ressources and with virtualization&lt;/li&gt;
&lt;li&gt;More strict access than public cloud&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;community-cloud&#34;&gt;
  Community Cloud
  &lt;a href=&#34;#community-cloud&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Can be premise or off premise&lt;/li&gt;
&lt;li&gt;Can be used by different organization that share the same concers&lt;/li&gt;
&lt;li&gt;Can be managed by the organization or third party&lt;/li&gt;
&lt;li&gt;Shared non public cloud&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;hybrid-cloud&#34;&gt;
  Hybrid Cloud
  &lt;a href=&#34;#hybrid-cloud&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Offer flexibily&lt;/li&gt;
&lt;li&gt;Can be a mix of 2 or more cloud deploymend models (private+public)&lt;/li&gt;
&lt;li&gt;Higher complexity: management of security and risk&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;cloud-virtualization&#34;&gt;
  Cloud virtualization
  &lt;a href=&#34;#cloud-virtualization&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Virtualization is a technique that is used in cloud computing to simulate the functioning of a software of device on top of a hardware layer&lt;/p&gt;

&lt;h2 id=&#34;means-of-virtualization&#34;&gt;
  Means of virtualization
  &lt;a href=&#34;#means-of-virtualization&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Multiplexing: Create a virtual object from one instance of physical object&lt;/li&gt;
&lt;li&gt;Aggregation: Create a virtual object from multiple physicla objects like raid for multiple disks&lt;/li&gt;
&lt;li&gt;Emulation: Creates a virtual object and its functioning from a different type of physical object&lt;/li&gt;
&lt;li&gt;Multiplexing &amp;amp; Emulation: combines multiplexing and emulation&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;advantages-of-virtualization&#34;&gt;
  Advantages of virtualization
  &lt;a href=&#34;#advantages-of-virtualization&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;less servers&lt;/li&gt;
&lt;li&gt;cost reduction&lt;/li&gt;
&lt;li&gt;better security&lt;/li&gt;
&lt;li&gt;power and space reduction&lt;/li&gt;
&lt;li&gt;better use of resources
Virtualization technology enables different virtual servers to share one physical server.
This process is called ==server consolidation==  which is commonly used to increase hardware utilization, load balancing and optimization of IT ressources.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    <item>
      <title>Openstack Services</title>
      <link>/posts/openstack-services/</link>
      <pubDate>Sat, 29 Jul 2023 13:34:01 +0100</pubDate>

      <guid>/posts/openstack-services/</guid>
      <description>Openstack An OpenStack deployment contains a number of components providing APIs to access infrastructure resources. This page lists the various services that can be deployed to provide such resources to cloud end users.
Compute NOVA(Compute service) Nova is the OpenStack project that provides a way to provision compute instances (aka virtual servers). Nova supports creating virtual machines, baremetal servers (through the use of ironic), and has limited support for system containers.</description>
      <content>
&lt;h1 id=&#34;openstack&#34;&gt;
  Openstack
  &lt;a href=&#34;#openstack&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;An OpenStack deployment contains a number of components providing APIs to access infrastructure resources. This page lists the various services that can be deployed to provide such resources to cloud end users.&lt;/p&gt;

&lt;h1 id=&#34;compute&#34;&gt;
  Compute
  &lt;a href=&#34;#compute&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;h2 id=&#34;novacompute-service&#34;&gt;
  NOVA(Compute service)
  &lt;a href=&#34;#novacompute-service&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Nova is the OpenStack project that provides a way to provision compute instances (aka virtual servers). Nova supports creating virtual machines, baremetal servers (through the use of ironic), and has limited support for system containers. Nova runs as a set of daemons on top of existing Linux servers to provide that service.&lt;/p&gt;

&lt;h3 id=&#34;dependencies&#34;&gt;
  Dependencies
  &lt;a href=&#34;#dependencies&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Keyston: This provides identity and authentication for all OpenStack services.&lt;/li&gt;
&lt;li&gt;Glance: This provides the compute image repository. All compute instances launch from glance images.&lt;/li&gt;
&lt;li&gt;Neutron: This is responsible for provisioning the virtual or physical networks that compute instances connect to on boot.&lt;/li&gt;
&lt;li&gt;Placement: This is responsible for tracking inventory of resources available in a cloud and assisting in choosing which provider of those resources will be used when creating a virtual machine.
&lt;em&gt;It can also integrate with other services to include: persistent block storage, encrypted disks, and baremetal compute instances.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;tools-for-using-nova&#34;&gt;
  Tools for using Nova
  &lt;a href=&#34;#tools-for-using-nova&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[[#Horizon]]: The official web UI for the OpenStack Project.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.openstack.org/python-openstackclient/latest/&#34;&gt;Openstack client&lt;/a&gt; : The official CLI for OpenStack Projects. You should use this as your CLI for most things, it includes not just nova commands but also commands for most of the projects in OpenStack.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.openstack.org/python-novaclient/latest/user/shell.html&#34;&gt;Nova client&lt;/a&gt; :For some very advanced features (or administrative commands) of nova you may need to use nova client. It is still supported, but the &lt;code&gt;openstack&lt;/code&gt; cli is recommended.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;zuncontainers-service&#34;&gt;
  ZUN(Containers Service)
  &lt;a href=&#34;#zuncontainers-service&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Zun is an OpenStack Container service. It aims to provide an API service for running application containers without the need to manage servers or clusters.&lt;/p&gt;

&lt;h3 id=&#34;dependencies-1&#34;&gt;
  Dependencies
  &lt;a href=&#34;#dependencies-1&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[[#KEYSTONE (Identity service)]]&lt;/li&gt;
&lt;li&gt;[[#NEUTRON]]&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.openstack.org/kuryr-libnetwork/latest/readme.html#kuryr-libnetwork&#34;&gt;Kuryr-libnetwork&lt;/a&gt;: Kuryr-libnetwork is &lt;a href=&#34;https://github.com/openstack/kuryr&#34;&gt;Kuryr’s&lt;/a&gt; Docker libnetwork driver that uses Neutron to provide networking services. It provides containerised images for the common Neutron plugins.
other optional services:&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Cinder: Cinder is the OpenStack Block Storage service for providing volumes to Nova virtual machines, Ironic bare metal hosts, containers and more.&lt;/li&gt;
&lt;li&gt;Heat: Heat is a service to orchestrate composite cloud applications using a declarative template format through an OpenStack-native REST API.&lt;/li&gt;
&lt;li&gt;Glance&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;hardware-lifecycle&#34;&gt;
  Hardware Lifecycle
  &lt;a href=&#34;#hardware-lifecycle&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;h2 id=&#34;ironic-bare-metal-provisioning&#34;&gt;
  IRONIC (Bare metal provisioning)
  &lt;a href=&#34;#ironic-bare-metal-provisioning&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Ironic is an OpenStack project which provisions bare metal (as opposed to virtual) machines. It may be used independently or as part of an OpenStack Cloud, and integrates with the OpenStack Identity (keystone), Compute (nova), Network (neutron), Image (glance), and Object (swift) services.
It provides the cloud operator with a unified interface to a heterogeneous fleet of servers while also providing the Compute service with an interface that allows physical servers to be managed as though they were virtual machines.&lt;/p&gt;

&lt;h1 id=&#34;storage&#34;&gt;
  Storage
  &lt;a href=&#34;#storage&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;h2 id=&#34;swift-object-store&#34;&gt;
  SWIFT (Object store)
  &lt;a href=&#34;#swift-object-store&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Swift is a highly available, distributed, eventually consistent object/blob store.
Swift is ideal for storing unstructured data that can grow without bound.&lt;/p&gt;

&lt;h2 id=&#34;cinder-block-storage&#34;&gt;
  CINDER (Block Storage)
  &lt;a href=&#34;#cinder-block-storage&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Cinder is the OpenStack Block Storage service for providing volumes to Nova virtual machines, Ironic bare metal hosts, containers and more.
Cinder goals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Component based architecture&lt;/strong&gt;: Quickly add new behaviors&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Highly available&lt;/strong&gt;: Scale to very serious workloads&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fault-Tolerant&lt;/strong&gt;: Isolated processes avoid cascading failures&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recoverable&lt;/strong&gt;: Failures should be easy to diagnose, debug, and rectify&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Open Standards&lt;/strong&gt;: Be a reference implementation for a community-driven api&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;dependencies-2&#34;&gt;
  Dependencies
  &lt;a href=&#34;#dependencies-2&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;keystone&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;tools-for-using-cinder&#34;&gt;
  Tools for using cinder
  &lt;a href=&#34;#tools-for-using-cinder&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Horizon&lt;/li&gt;
&lt;li&gt;Openstack client&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.openstack.org/python-cinderclient/latest/user/shell.html&#34;&gt;Cinder Client&lt;/a&gt;: The &lt;strong&gt;openstack&lt;/strong&gt; CLI is recommended, but there are some advanced features and administrative commands that are not yet available there. For CLI access to these commands, the &lt;strong&gt;cinder&lt;/strong&gt; CLI can be used instead.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;networking&#34;&gt;
  Networking
  &lt;a href=&#34;#networking&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;h2 id=&#34;neutron&#34;&gt;
  NEUTRON
  &lt;a href=&#34;#neutron&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Neutron is an OpenStack project to provide “network connectivity as a service” between interface devices, managed by other OpenStack services (e.g., nova). It implements the &lt;a href=&#34;https://docs.openstack.org/api-ref/network/&#34;&gt;OpenStack Networking API&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;dependencies-3&#34;&gt;
  Dependencies
  &lt;a href=&#34;#dependencies-3&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[[#KEYSTONE (Identity service)]]&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;orchestration&#34;&gt;
  Orchestration
  &lt;a href=&#34;#orchestration&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;h2 id=&#34;heat&#34;&gt;
  HEAT
  &lt;a href=&#34;#heat&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Heat is a service to orchestrate composite cloud applications using a declarative template format through an OpenStack-native REST API.
Heat provides a template based orchestration for describing a cloud application.
A Heat template describes the infrastructure for a cloud application in text files which are readable and writable by humans, and can be managed by version control tools.&lt;/p&gt;

&lt;h1 id=&#34;web-frontends&#34;&gt;
  Web frontends
  &lt;a href=&#34;#web-frontends&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;h2 id=&#34;horizon&#34;&gt;
  Horizon
  &lt;a href=&#34;#horizon&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;a web based user interface to OpenStack services including Nova, Swift, Keystone, etc.
Horizon ships with three central dashboards:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User Dashboard&lt;/li&gt;
&lt;li&gt;System Dashboard&lt;/li&gt;
&lt;li&gt;Settings” dashboard.
Between these three they cover the core OpenStack applications and deliver on Core Support.
The Horizon application also ships with a set of API abstractions for the core OpenStack projects in order to provide a consistent, stable set of reusable methods for developers. Using these abstractions, developers working on Horizon don’t need to be intimately familiar with the APIs of each OpenStack project.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;shared-services&#34;&gt;
  Shared Services
  &lt;a href=&#34;#shared-services&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;h2 id=&#34;glance-image-services&#34;&gt;
  Glance (Image services)
  &lt;a href=&#34;#glance-image-services&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;The Image service (glance) project provides a service where users can upload and discover data assets that are meant to be used with other services. This currently includes &lt;em&gt;images&lt;/em&gt; and &lt;em&gt;metadata definitions&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;images&#34;&gt;
  Images
  &lt;a href=&#34;#images&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;discovering, registering, and retrieving virtual machine (VM) images. Glance has a RESTful API that allows querying of VM image metadata as well as retrieval of the actual image.&lt;/p&gt;

&lt;h3 id=&#34;metadata-definitions&#34;&gt;
  Metadata Definitions
  &lt;a href=&#34;#metadata-definitions&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Glance hosts a &lt;em&gt;metadefs&lt;/em&gt; catalog. This provides the OpenStack community with a way to programmatically determine various metadata key names and valid values that can be applied to OpenStack resources.
Note that what we’re talking about here is simply a &lt;em&gt;catalog&lt;/em&gt;; the keys and values don’t actually do anything unless they are applied to individual OpenStack resources using the APIs or client tools provided by the services responsible for those resources.&lt;/p&gt;

&lt;h2 id=&#34;keystone-identity-service&#34;&gt;
  KEYSTONE (Identity service)
  &lt;a href=&#34;#keystone-identity-service&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Keystone is an OpenStack service that provides API client authentication, service discovery, and distributed multi-tenant authorization by implementing OpenStack’s Identity API.&lt;/p&gt;

&lt;h3 id=&#34;tools-for-using-keystone&#34;&gt;
  Tools for using keystone
  &lt;a href=&#34;#tools-for-using-keystone&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;keystone can be managed through cli management utilities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;keystone-manage: the command line tool which interacts with the Keystone service to initialize and update data within Keystone. Generally, &lt;code&gt;keystone-manage&lt;/code&gt; is only used for operations that cannot be accomplished with the HTTP API, such data import/export and database migrations.&lt;/li&gt;
&lt;li&gt;keystone-status: command line tool that helps operators upgrade their deployment.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;advanced-features&#34;&gt;
  Advanced features
  &lt;a href=&#34;#advanced-features&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;keystone provides other more advanced features like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unified Limits: limits can be used by services to enforce quota on resources across OpenStack.&lt;/li&gt;
&lt;li&gt;Resource Options: options are used to control specific features or behaviors within keystone.&lt;/li&gt;
&lt;li&gt;Credential Encryption:  keystone encrypts all credentials stored in the default &lt;code&gt;sql&lt;/code&gt; backend. Credentials are encrypted with the same mechanism used to encrypt Fernet tokens, &lt;code&gt;fernet&lt;/code&gt;. Keystone provides only one type of credential encryption but the encryption provider is pluggable in the event you wish to supply a custom implementation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;webography&#34;&gt;
  Webography
  &lt;a href=&#34;#webography&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.openstack.org/software/project-navigator/openstack-components#openstack-services&#34;&gt;OpenStack Services&lt;/a&gt;
&lt;a href=&#34;https://docs.openstack.org/kuryr-libnetwork/latest/readme.html#kuryr-libnetwork&#34;&gt;Kuryr-libnetwork&lt;/a&gt;
&lt;a href=&#34;https://docs.openstack.org/ironic/latest/&#34;&gt;Ironic&lt;/a&gt;
&lt;a href=&#34;https://docs.openstack.org/swift/latest/&#34;&gt;Swift&lt;/a&gt;
&lt;a href=&#34;https://docs.openstack.org/cinder/latest/&#34;&gt;Cinder&lt;/a&gt;
&lt;a href=&#34;https://docs.openstack.org/neutron/latest/&#34;&gt;Neutron&lt;/a&gt;
&lt;a href=&#34;https://docs.openstack.org/heat/latest/&#34;&gt;Heat&lt;/a&gt;
&lt;a href=&#34;https://docs.openstack.org/horizon/latest/&#34;&gt;Horizon&lt;/a&gt;
&lt;a href=&#34;https://docs.openstack.org/horizon/latest/contributor/intro.html#contributor-intro&#34;&gt;Horizon Basics&lt;/a&gt;
&lt;a href=&#34;https://docs.openstack.org/keystone/latest/&#34;&gt;Keystone&lt;/a&gt;
&lt;a href=&#34;https://docs.openstack.org/keystone/latest/admin/unified-limits.html&#34;&gt;Unified limits&lt;/a&gt;
&lt;a href=&#34;https://docs.openstack.org/keystone/latest/admin/resource-options.html&#34;&gt;Resource options&lt;/a&gt;
&lt;a href=&#34;https://docs.openstack.org/keystone/latest/admin/credential-encryption.html&#34;&gt;Credential encryptiuon&lt;/a&gt;
&lt;a href=&#34;https://docs.openstack.org/glance/latest/&#34;&gt;Glance&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
  </channel>
</rss>
